<?php
class BooksController extends AppController {
	
	public $helpers = array('Html', 'Form');
	public $components = array('Session');
	
	
	
	function index($id = null) {
		$this->Book->User->id = $id;
	
		
	
		$this->set('authfirstName', $this->Auth->user('firstname'));
		$this->set('authlastName', $this->Auth->user('lastname'));
		
		$this->set('books', $this->Book->find('all'));
		$this->set('books', $this->paginate());	
	}
	
	function view($id = null) {
		$this->Book->id = $id;
		$this->set('book', $this->Book->read());
		
		
		
	}
	
	public function add() {
		if ($this->request->is('post')) {
			
			 //Don't request the userid when adding a book the related
			 //Book will be displayed with the checkout/in feature
			if ($this->Book->save($this->request->data)) {
				$this->Session->setFlash('Your book has been saved.');
				$this->redirect(array('action' => 'index'));
			}else {
				$this->Session->setFlash('Unable to add your book');
			}
		}
	}
	
	function checkout($id = null)
	{
		
		
		$this->set('authUserId', $this->Auth->user('student'));
		$this->Book->id = $id;
		$this->set('book', $this->Book->read());
		
		
		
			if ($this->request->is('post')) {
				
				$this->request->data['Book']['user_id'] = $this->Auth->user('id');
				// Requests the student id
				if ($this->Book->save($this->request->data)) {
					// The student logged in can only use the assigned
					// Assigned student id generated by the system
					if($this->request->data['Book']['user_student'] == $this->Auth->user('student')) {
						debug($this->request->data['Book']['user_student']);
						// If the book is checked out status becomes true
						$this->Book->saveField('status','TRUE');
						
						$this->Session->setFlash('Your book has been checked out.', 'success');
						$this->redirect(array('action' => 'index'));
					} else {
						$this->Book->set(array('user_student' => null,
											   'user_id' => null));
						$this->Book->save();
						//$this->Book->saveField('user_student', null);
						$this->Session->setFlash('The student id entered is incorrect.');
					}
					
				}else {
					$this->Session->setFlash('Unable to checkout your book');
				}
			} else if($this->Book->field('status') == TRUE) {
				
				$this->Session->setFlash('This book has already been checked out.');
				$this->redirect(array('action' => 'index'));
			}
	}
	
	function checkin($id = null) {
		$this->set('authUser', $this->Auth->user('lastname'));
		$this->set('authUserId', $this->Auth->user('student'));
		debug($this->Book->read('user_student'));
		debug($this->Auth->user('student'));
		
		$this->Book->id = $id;
		$this->set('book', $this->Book->read());
		$studentid = $this->Auth->user('student');
		$userid = $this->Auth->user('id');
		// If the book is checked out, then allow the book to be checked in.
		if($this->request->is('post')  && $this->Book->field('status') == TRUE) {
			
			if($this->Book->save($this->request->data)) {
				debug($this->Book->read('user_student'));
				// If the user logged in enters the correct
				// Matching id, check in the book and allow
				// Others to checkout the book by setting the
				// Checked out status to false.
				
				if($this->Auth->user('student') == $this->request->data['Book']['user_student']) {
					
					$this->Book->set(array('status' => false,
											'user_student' => null,
											'user_id' => null));
					$this->Book->save();
					
					//$this->Book->saveField('status', FALSE);
					//$this->Book->saveField('user_student', null);
					$this->Session->setFlash('Your book has been checked in!', 'success');
					$this->redirect(array('action' => 'index'));
				} else {
					$this->Session->setFlash('The student id entered is incorrect');
					$this->Book->saveField('user_student', $studentid);
				}
			} else {
				$this->Session->setFlash('Unable to check in your book');
			}
			 
		} else if($this->Book->field('status') == FALSE) {
			$this->Session->setFlash('The book is available!', 'success');
			$this->redirect(array('action' => 'index'));
		}
	}
	// End function checkin
	
	
	// Begin function search
	function search(){
		$conditions = null;
		if (!empty($this->data)) {
			
	        $searchtitle = $this->data['Book']['searchtitle'];
	        $searchauthor = $this->data['Book']['searchauthor'];
	        $searchisbn = $this->data['Book']['searchisbn'];
	        //$searchauthor = $this->data['Book']['searchauthor'];
	        //$this->set('searchstring', $this->data['Book']['search']);
	      
	        
	        $conditions = array(
	            'conditions' => array(
		            'and' => array(
		                "Book.title LIKE" => "%$searchtitle%",
		                "Book.author LIKE" => "%$searchauthor%",
		            	"Book.isbn LIKE" => "%$searchisbn%"
		            )
	            )
	        );
	    }
		
		
	    $this->set('books', $this->Book->find('all', $conditions));
	    
		
	}
	
	
	// Begin function edit
	function edit($id = null) {
		$this->Book->id = $id;
		if($this->request->is('get')) {
			$this->request->data = $this->Book->read();
		}
		else {
			if($this->Book->save($this->request->data)) {
				$this->Session->setFlash('Your book has been updated');
				$this->redirect(array('action' => 'index'));
				
			}
			else {
				$this->Session->setFlash('Unable to update your book');
			}
		}
		
	}
	
	//Delete
	function delete($id) {
		if($this->request->is('get')) {
			throw new MethodNotAllowedException();
		}
		else{
			$this->Book->delete($id);
			$this->Session->setFlash('The book with id '. $id .' has been removed');
			$this->redirect(array('action' => 'index'));
		}
	}
	
	
	
	
}